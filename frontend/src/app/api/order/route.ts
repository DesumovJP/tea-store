import { Resend } from "resend";
import { NextResponse } from "next/server";

const resend = new Resend(process.env.RESEND_API_KEY);

export async function POST(req: Request) {
	const body = await req.json();
	const { name, email, phone, notes, items, total, delivery, payment } = body;

	// –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
	const orderNumber = `GT-${Date.now()}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;

	const itemList = (items as Array<{ name: string; quantity: number; price: number }>)
		.map((i) => `‚Ä¢ ${i.name} √ó ${i.quantity} ‚Äî $${(i.price * i.quantity).toFixed(2)}`)
		.join("\n");

	const deliveryText = (() => {
		if (!delivery) return "";
		if (delivery.method === "courier") {
			const address = [delivery.city, delivery.street, `–±—É–¥. ${delivery.house}`, delivery.apartment ? `–∫–≤. ${delivery.apartment}` : null]
				.filter(Boolean)
				.join(", ");
			return `–î–æ—Å—Ç–∞–≤–∫–∞: –ö—É—Ä'—î—Ä\n–ê–¥—Ä–µ—Å–∞: ${address}`;
		}
		if (delivery.method === "nova_poshta") {
			return `–î–æ—Å—Ç–∞–≤–∫–∞: –ù–æ–≤–∞ –ü–æ—à—Ç–∞ (–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è)\n–ú—ñ—Å—Ç–æ: ${delivery.city}\n–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: ${delivery.npBranch}`;
		}
		return "";
	})();

	const paymentText = (() => {
		if (!payment) return "";
		if (payment.method === "card_online") {
			const masked = payment.cardNumber ? String(payment.cardNumber).replace(/\s+/g, "").slice(-4) : "****";
			return `–û–ø–ª–∞—Ç–∞: –û–Ω–ª–∞–π–Ω –∫–∞—Ä—Ç–∫–æ—é (**** **** **** ${masked})`;
		}
		if (payment.method === "card_on_delivery") return "–û–ø–ª–∞—Ç–∞: –ö–∞—Ä—Ç–∫–æ—é –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ";
		if (payment.method === "cash") return "–û–ø–ª–∞—Ç–∞: –ì–æ—Ç—ñ–≤–∫–∞";
		return "";
	})();

	// HTML —à–∞–±–ª–æ–Ω –¥–ª—è email
	const htmlTemplate = `
		<!DOCTYPE html>
		<html>
		<head>
			<meta charset="utf-8">
			<title>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - GURU TEA</title>
			<style>
				body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
				.container { max-width: 600px; margin: 0 auto; padding: 20px; }
				.header { background: #2C2C2C; color: white; padding: 20px; text-align: center; }
				.content { background: #f9f9f9; padding: 20px; }
				.order-info { background: white; padding: 15px; margin: 10px 0; border-left: 4px solid #2C2C2C; }
				.items-table { width: 100%; border-collapse: collapse; margin: 15px 0; }
				.items-table th, .items-table td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
				.items-table th { background: #f5f5f5; }
				.total { font-size: 18px; font-weight: bold; color: #2C2C2C; }
				.footer { background: #2C2C2C; color: white; padding: 15px; text-align: center; font-size: 12px; }
			</style>
		</head>
		<body>
			<div class="container">
				<div class="header">
					<h1>üçµ GURU TEA</h1>
					<h2>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${orderNumber}</h2>
				</div>
				
				<div class="content">
					<div class="order-info">
						<h3>üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h3>
						<p><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> ${orderNumber}</p>
						<p><strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleString('uk-UA')}</p>
					</div>

					<div class="order-info">
						<h3>üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ</h3>
						<p><strong>–Ü–º'—è:</strong> ${name}</p>
						<p><strong>Email:</strong> ${email}</p>
                        <p><strong>Phone:</strong> ${phone || "-"}</p>
                        ${notes ? `<p><strong>Comment:</strong> ${notes}</p>` : ""}
					</div>

					<div class="order-info">
						<h3>üöö –î–æ—Å—Ç–∞–≤–∫–∞</h3>
						${deliveryText.split('\n').map(line => `<p>${line}</p>`).join('')}
					</div>

					<div class="order-info">
						<h3>üí≥ –û–ø–ª–∞—Ç–∞</h3>
						<p>${paymentText}</p>
					</div>

					<div class="order-info">
						<h3>üõçÔ∏è –¢–æ–≤–∞—Ä–∏</h3>
						<table class="items-table">
							<thead>
								<tr>
									<th>–¢–æ–≤–∞—Ä</th>
									<th>–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th>
									<th>–¶—ñ–Ω–∞</th>
									<th>–°—É–º–∞</th>
								</tr>
							</thead>
							<tbody>
				${(items as Array<{ name: string; quantity: number; price: number }>).map((item) => `
									<tr>
										<td>${item.name}</td>
										<td>${item.quantity}</td>
										<td>$${item.price.toFixed(2)}</td>
										<td>$${(item.price * item.quantity).toFixed(2)}</td>
									</tr>
								`).join('')}
							</tbody>
						</table>
						<div class="total" style="text-align: right; margin-top: 15px;">
							–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: $${total.toFixed(2)}
						</div>
					</div>
				</div>

				<div class="footer">
					<p>GURU TEA - –í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–π —á–∞–π –∑ —É—Å—å–æ–≥–æ —Å–≤—ñ—Ç—É</p>
					<p>–¶–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –Ω—å–æ–≥–æ</p>
				</div>
			</div>
		</body>
		</html>
	`;

	// –¢–µ–∫—Å—Ç–æ–≤–∞ –≤–µ—Ä—Å—ñ—è email
	const textTemplate = `
–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${orderNumber}

üìã –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderNumber}
–î–∞—Ç–∞: ${new Date().toLocaleString('uk-UA')}

üë§ –ö–û–ù–¢–ê–ö–¢–ù–Ü –î–ê–ù–Ü
–Ü–º'—è: ${name}
Email: ${email}
Phone: ${phone || "-"}
${notes ? `Comment: ${notes}\n` : ""}

üöö –î–û–°–¢–ê–í–ö–ê
${deliveryText}

üí≥ –û–ü–õ–ê–¢–ê
${paymentText}

üõçÔ∏è –¢–û–í–ê–†–ò
${itemList}

üí∞ –ó–ê–ì–ê–õ–¨–ù–ê –°–£–ú–ê: $${total.toFixed(2)}

---
GURU TEA - –í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–π —á–∞–π –∑ —É—Å—å–æ–≥–æ —Å–≤—ñ—Ç—É
–¶–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –Ω—å–æ–≥–æ
	`;

	try {
		// –í–∏–∑–Ω–∞—á–∞—î–º–æ from –∞–¥—Ä–µ—Å—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
		const fromEmail = process.env.NODE_ENV === 'production' 
			? "orders@gurutea.com" 
			: "onboarding@resend.dev";

		// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
		await resend.emails.send({
			from: fromEmail,
			to: process.env.ADMIN_EMAIL || "admin@gurutea.com",
			subject: `üçµ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${orderNumber} - GURU TEA`,
			html: htmlTemplate,
			text: textTemplate,
		});

        // Send confirmation to the client
		const clientHtmlTemplate = `
			<!DOCTYPE html>
			<html>
			<head>
				<meta charset="utf-8">
				<title>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - GURU TEA</title>
				<style>
					body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
					.container { max-width: 600px; margin: 0 auto; padding: 20px; }
					.header { background: #2C2C2C; color: white; padding: 20px; text-align: center; }
					.content { background: #f9f9f9; padding: 20px; }
					.order-info { background: white; padding: 15px; margin: 10px 0; border-left: 4px solid #2C2C2C; }
					.items-table { width: 100%; border-collapse: collapse; margin: 15px 0; }
					.items-table th, .items-table td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
					.items-table th { background: #f5f5f5; }
					.total { font-size: 18px; font-weight: bold; color: #2C2C2C; }
					.footer { background: #2C2C2C; color: white; padding: 15px; text-align: center; font-size: 12px; }
					.thank-you { background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 15px 0; }
				</style>
			</head>
			<body>
				<div class="container">
					<div class="header">
						<h1>üçµ GURU TEA</h1>
						<h2>–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</h2>
					</div>
					
					<div class="content">
						<div class="thank-you">
							<h3>‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!</h3>
							<p>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${orderNumber} —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.</p>
						</div>

						<div class="order-info">
							<h3>üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h3>
							<p><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> ${orderNumber}</p>
							<p><strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleString('uk-UA')}</p>
						</div>

						<div class="order-info">
							<h3>üõçÔ∏è –í–∞—à—ñ —Ç–æ–≤–∞—Ä–∏</h3>
							<table class="items-table">
								<thead>
									<tr>
										<th>–¢–æ–≤–∞—Ä</th>
										<th>–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th>
										<th>–¶—ñ–Ω–∞</th>
										<th>–°—É–º–∞</th>
									</tr>
								</thead>
								<tbody>
				${(items as Array<{ name: string; quantity: number; price: number }>).map((item) => `
										<tr>
											<td>${item.name}</td>
											<td>${item.quantity}</td>
											<td>$${item.price.toFixed(2)}</td>
											<td>$${(item.price * item.quantity).toFixed(2)}</td>
										</tr>
									`).join('')}
								</tbody>
							</table>
							<div class="total" style="text-align: right; margin-top: 15px;">
								–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: $${total.toFixed(2)}
							</div>
						</div>

						<div class="order-info">
							<h3>üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏</h3>
							<p>–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏:</p>
							<p>üìß Email: info@gurutea.com</p>
							<p>üì± –¢–µ–ª–µ—Ñ–æ–Ω: +380 (XX) XXX-XX-XX</p>
						</div>
					</div>

					<div class="footer">
						<p>GURU TEA - –í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–π —á–∞–π –∑ —É—Å—å–æ–≥–æ —Å–≤—ñ—Ç—É</p>
						<p>–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å! üôè</p>
					</div>
				</div>
			</body>
			</html>
		`;

		const clientTextTemplate = `
–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!

‚úÖ –ó–ê–ú–û–í–õ–ï–ù–ù–Ø –ü–†–ò–ô–ù–Ø–¢–û!
–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${orderNumber} —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.

üìã –î–ï–¢–ê–õ–Ü –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderNumber}
–î–∞—Ç–∞: ${new Date().toLocaleString('uk-UA')}

üõçÔ∏è –í–ê–®–Ü –¢–û–í–ê–†–ò
${itemList}

üí∞ –ó–ê–ì–ê–õ–¨–ù–ê –°–£–ú–ê: $${total.toFixed(2)}

üìû –ö–û–ù–¢–ê–ö–¢–ò
–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏:
üìß Email: info@gurutea.com
üì± –¢–µ–ª–µ—Ñ–æ–Ω: +380 (XX) XXX-XX-XX

---
GURU TEA - –í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–π —á–∞–π –∑ —É—Å—å–æ–≥–æ —Å–≤—ñ—Ç—É
–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å! üôè
		`;

		await resend.emails.send({
			from: fromEmail,
			to: email,
			subject: `‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${orderNumber} - GURU TEA`,
			html: clientHtmlTemplate,
			text: clientTextTemplate,
		});

        console.log(`‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #${orderNumber} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ email`);

        // Persist order in Strapi (GraphQL) for analytics
        try {
            const createMutation = `
              mutation CreateOrder($data: OrderInput!) {
                createOrder(data: $data) { documentId }
              }
            `;
            const strapiUrl = process.env.NEXT_PUBLIC_CMS_URL;
            const token = process.env.STRAPI_API_TOKEN as string;
            if (strapiUrl && token) {
                await fetch(`${strapiUrl}/graphql`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${token}`,
                    },
                    body: JSON.stringify({
                        query: createMutation,
                        variables: {
                            data: {
                                orderNumber,
                                email,
                                name,
                                total: Math.round(total),
                                items,
                                meta: { delivery, payment },
                            },
                        },
                    }),
                });
            }
        } catch (e) {
            // non-blocking
        }
		return NextResponse.json({ 
			success: true, 
			orderNumber: orderNumber,
			message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ email"
		});
	} catch (error) {
		console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email:", error);
		return NextResponse.json({ 
			success: false, 
			error: "–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ." 
		}, { status: 500 });
	}
}
